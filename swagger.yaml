openapi: 3.0.0
info:
  title: Twitter API
  description: API for Twitter-like functionality
  version: 1.0.0
  contact:
    name: 'Van Tran'
    email: 'van.tran@asnet.com.vn'
    url: 'https://github.com/vantran-agilityio'
servers:
  - url: http://localhost:3000
    description: Local development server
  - url: 'https://twitter-api-latest.onrender.com'
    description: 'Live server'
paths:
  /signup:
    post:
      tags:
        - Authentication
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: 'John Doe'
                email:
                  type: string
                  format: email
                  example: 'john@example.com'
                password:
                  type: string
                  format: password
                  example: 'securePassword123'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
        409:
          description: Conflict - Email already exists
        404:
          description: Not Found
        500:
          description: Server Error

  /signin:
    post:
      tags:
        - Authentication
      summary: User sign in
      description: Authenticates a user and returns a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: 'john@example.com'
                password:
                  type: string
                  format: password
                  example: 'securePassword123'
      responses:
        200:
          description: Successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
        400:
          description: Bad Request - Missing required fields
        401:
          description: Unauthorized - Invalid credentials
        404:
          description: Not Found - User not found
        500:
          description: Server Error

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieves a list of all users
      security:
        - BearerAuth: []
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: Unauthorized - Authentication required
        404:
          description: No users found
        500:
          description: Server Error
    post:
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user with the provided information
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserInput'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request - Invalid input
        401:
          description: Unauthorized - Authentication required
        500:
          description: Server Error
    put:
      tags:
        - Users
      summary: Update multiple users
      description: Updates multiple users with the provided information
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - users
              properties:
                users:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserUpdate'
      responses:
        200:
          description: Users updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Users updated successfully
        400:
          description: Bad Request - Invalid input
        401:
          description: Unauthorized - Authentication required
        500:
          description: Server Error
    delete:
      tags:
        - Users
      summary: Delete all users
      description: Removes all users from the system
      security:
        - BearerAuth: []
      responses:
        200:
          description: All users deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All users deleted successfully
        401:
          description: Unauthorized - Authentication required
        500:
          description: Server Error

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieves a single user by their ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized - Authentication required
        404:
          description: User not found
        500:
          description: Server Error
    put:
      tags:
        - Users
      summary: Update user by ID
      description: Updates a user's information by their ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserInput'
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated successfully
        400:
          description: Bad Request - Invalid input
        401:
          description: Unauthorized - Authentication required
        404:
          description: User not found
        500:
          description: Server Error
    delete:
      tags:
        - Users
      summary: Delete user by ID
      description: Removes a user from the system by their ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: string
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        401:
          description: Unauthorized - Authentication required
        404:
          description: User not found
        500:
          description: Server Error

  /posts:
    get:
      tags:
        - Posts
      summary: Get all posts
      description: Retrieves a list of all posts
      security:
        - BearerAuth: []
      responses:
        200:
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        401:
          description: Unauthorized - Authentication required
        404:
          description: No posts found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'No posts found'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Internal Server Error'
    delete:
      tags:
        - Posts
      summary: Delete all posts
      description: Removes all posts from the system
      security:
        - BearerAuth: []
      responses:
        200:
          description: All posts deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'All posts deleted successfully'
        401:
          description: Unauthorized - Authentication required
        500:
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Internal Server Error'

  /posts/{id}:
    get:
      tags:
        - Posts
      summary: Get post by ID
      description: Retrieves a single post by its ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to retrieve
          schema:
            type: string
      responses:
        200:
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        401:
          description: Unauthorized - Authentication required
        404:
          description: Post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Post not found'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Internal Server Error'
    put:
      tags:
        - Posts
      summary: Update post by ID
      description: Updates a post's information by its ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostInput'
      responses:
        200:
          description: Post updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Post updated successfully'
        400:
          description: Bad Request - Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Title or description is required'
        401:
          description: Unauthorized - Authentication required
        404:
          description: Post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Post not found'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Internal Server Error'

  /users/{id}/post:
    post:
      tags:
        - Posts
      summary: Create a new post
      description: Creates a new post for a specific user
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user creating the post
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostInput'
      responses:
        201:
          description: Post created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  title:
                    type: string
                  description:
                    type: string
                  userId:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        400:
          description: Bad Request - Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Title and description are required'
        401:
          description: Unauthorized - Authentication required
        404:
          description: User not found
        500:
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Internal Server Error'

  /users/{userId}/post/{postId}:
    delete:
      tags:
        - Posts
      summary: Delete a post
      description: Deletes a specific post for a specific user
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user who owns the post
          schema:
            type: string
        - name: postId
          in: path
          required: true
          description: ID of the post to delete
          schema:
            type: string
      responses:
        200:
          description: Post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Post deleted successfully'
        401:
          description: Unauthorized - Authentication required
        404:
          description: Post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Post not found'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Internal Server Error'

  /posts/{id}/comments:
    get:
      tags:
        - Comments
      summary: Get all comments for a post
      description: Retrieves all comments associated with a specific post
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post
          schema:
            type: string
      responses:
        200:
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        401:
          description: Unauthorized - Authentication required
        404:
          description: Not Found - Post not found or no comments found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Comments
      summary: Create a new comment
      description: Adds a new comment to a specific post
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentInput'
      responses:
        201:
          description: Comment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Comment created successfully'
                  newComment:
                    $ref: '#/components/schemas/Comment'
        400:
          description: Bad Request - Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Authentication required
        404:
          description: Not Found - Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Comments
      summary: Delete all comments for a post
      description: Removes all comments associated with a specific post
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post
          schema:
            type: string
      responses:
        200:
          description: All comments deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'All comments for this post deleted successfully'
        401:
          description: Unauthorized - Authentication required
        404:
          description: Not Found - Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /posts/{postId}/comment/{commentId}:
    get:
      tags:
        - Comments
      summary: Get a specific comment
      description: Retrieves a specific comment by ID from a specific post
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          description: ID of the post
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          description: ID of the comment
          schema:
            type: string
      responses:
        200:
          description: Comment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        401:
          description: Unauthorized - Authentication required
        404:
          description: Not Found - Comment or post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Comments
      summary: Delete a specific comment
      description: Removes a specific comment by ID from a specific post
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          description: ID of the post
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          description: ID of the comment
          schema:
            type: string
      responses:
        200:
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Comment deleted successfully'
        401:
          description: Unauthorized - Authentication required
        404:
          description: Not Found - Comment or post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: '123e4567-e89b-12d3-a456-426614174000'
        name:
          type: string
          example: 'John Doe'
        email:
          type: string
          format: email
          example: 'john@example.com'
      required:
        - id
        - name
        - email

    CreateUserInput:
      type: object
      properties:
        name:
          type: string
          example: 'John Doe'
        email:
          type: string
          format: email
          example: 'john@example.com'
        password:
          type: string
          format: password
          example: 'securePassword123'
      required:
        - name
        - email
        - password

    UpdateUserInput:
      type: object
      properties:
        name:
          type: string
          example: 'John Doe'
        email:
          type: string
          format: email
          example: 'john@example.com'
      required:
        - name
        - email

    UserUpdate:
      type: object
      properties:
        id:
          type: string
          example: '123e4567-e89b-12d3-a456-426614174000'
        name:
          type: string
          example: 'John Doe'
        email:
          type: string
          format: email
          example: 'john@example.com'
      required:
        - id
        - name
        - email

    Post:
      type: object
      properties:
        id:
          type: string
          example: '123e4567-e89b-12d3-a456-426614174000'
        title:
          type: string
          example: 'Sample Post Title'
        description:
          type: string
          example: 'This is a sample post description'
        userId:
          type: string
          example: 'abc123-user-id'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - title
        - description
        - userId

    CreatePostInput:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          example: 'New Post Title'
        description:
          type: string
          example: 'This is a new post description'

    UpdatePostInput:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          example: 'Updated Post Title'
        description:
          type: string
          example: 'This is an updated post description'

    Comment:
      type: object
      properties:
        id:
          type: string
          example: '123e4567-e89b-12d3-a456-426614174000'
        content:
          type: string
          example: 'This is a great post!'
        userId:
          type: string
          example: 'abc123-user-id'
        postId:
          type: string
          example: 'def456-post-id'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - content
        - userId
        - postId

    CreateCommentInput:
      type: object
      required:
        - content
        - userId
      properties:
        content:
          type: string
          example: 'This is a great post!'
        userId:
          type: string
          example: 'abc123-user-id'

    CommentResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Comment operation successful'

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: 'Error message'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
